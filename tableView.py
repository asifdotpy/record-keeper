# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'table.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""import necessery modules"""

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem, QAbstractItemView, QHeaderView, QVBoxLayout
from PyQt5.QtGui import QIcon, QBrush, QColor
from PyQt5.QtCore import QSize, Qt
import sqlite3


def font_func(pointsize=10, bold=False):
    """"it will take two parameter first one is for font size and the other will take boolean value"""
    font = QtGui.QFont()
    font.setPointSize(pointsize)
    font.setBold(bold)
    return font

def searchItems(row="mobile"):
    """this function will take the column name from the table. Right now it is set to mobile
        but in future update we will add name here. since cursor.execute returns tuples
        we made a list comprehension to pass it into Qcompleter."""
    connection = sqlite3.connect("db.sqlite")
    cursor = connection.cursor()
    items = cursor.execute(f"SELECT {row} FROM data")
    connection.commit()
    return [item[0] for item in items]



class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1023, 555)
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(0, 50, 1021, 501))
        self.tableWidget.setStyleSheet("font-size:14px;\n"
"font-weight:bold;")

        self.tableWidget.setRowCount(self.rowCount())
        self.tableWidget.setColumnCount(9)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        """adding search bar. it has a label, a push button and a line edit"""
        self.searchBar = QtWidgets.QLineEdit(Form)
        self.searchBar.setGeometry(QtCore.QRect(230, 10, 581, 31))
        self.searchBar.setStyleSheet("font-size:18px;\n"
                                    "font-weight:bold;")
        self.searchBar.setObjectName("lineEdit")
        self.searchCombo = QtWidgets.QComboBox(Form)
        self.searchCombo.setGeometry(QtCore.QRect(100, 10, 121, 31))
        self.searchCombo.setStyleSheet("font-size:18px;\n"
                                    "color:#036bfc;")
        self.searchCombo.setObjectName("comboBox")
        self.searchCombo.addItem("")
        self.searchLabel = QtWidgets.QLabel(Form)
        self.searchLabel.setGeometry(QtCore.QRect(10, 10, 81, 31))
        self.searchLabel.setStyleSheet("font-size:18px;")
        self.searchLabel.setObjectName("searchLabel")
        #------------------------------adding search button ------------------------------------------#
        self.searchBtn = QtWidgets.QPushButton(Form)
        self.searchBtn.setGeometry(QtCore.QRect(820, 5, 51, 41))
        self.searchBtn.setStyleSheet("background:#00c3ff;")
        self.searchBtn.setIcon(QIcon("./search.png"))
        size = QSize(21, 21)
        self.searchBtn.setIconSize(size)
        self.searchBtn.clicked.connect(self.searchBtnFunc)
        #----------------------------------item clicked----------------------------------------------#

        #--------------------------------------------------------------------------------------------#

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUi(self, Form):
        self.tableWidget.verticalHeader().setDefaultSectionSize(150)
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Image"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Name"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Mobile"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Products"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Pieces"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "Price"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Form", "Date"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("Form", "Address"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("Form", "Salesman"))
        """extra codes for search bar"""
        self.searchBar.setPlaceholderText(_translate("Form", "Type Here"))
        self.searchCombo.setItemText(0, _translate("Form", "Mobile"))
        self.searchLabel.setText(_translate("Form", "Search By"))

        # ----------------------------------------------adding items into table-----------------------------------##
        items = self.db().execute("SELECT * FROM data")
        items = items.fetchall()
        for index, item in enumerate(items):
            image, name, mobile, products, pieces, price, date, address, salesman = item
            picData = self.getImageLabel(image)
            self.tableWidget.setCellWidget(index, 0, picData)
            self.tableWidget.setItem(index, 1, QTableWidgetItem(name))
            self.tableWidget.setItem(index, 2, QTableWidgetItem(str(mobile)))
            self.tableWidget.setItem(index, 3, QTableWidgetItem(str(products)))
            self.tableWidget.setItem(index, 4, QTableWidgetItem(str(pieces)))
            self.tableWidget.setItem(index, 5, QTableWidgetItem(str(price)))
            self.tableWidget.setItem(index, 6, QTableWidgetItem(str(date)))
            self.tableWidget.setItem(index, 7, QTableWidgetItem(address))
            self.tableWidget.setItem(index, 8, QTableWidgetItem(salesman))

    #--------------------------------------adding completer ---------------------------------------#
        self.completer = QtWidgets.QCompleter(searchItems(self.searchCombo.currentText().lower()))
        self.completer.popup().setFont(font_func(14, True))
        self.searchBar.setCompleter(self.completer)

    #----------------------------------------------------------------------------------------------#
    def db(self):
        self.connection = sqlite3.connect("db.sqlite")
        self.cursor = self.connection.cursor()
        return self.cursor

    def rowCount(self):
        """This method will return exact rows from the table"""
        rows = self.db().execute("SELECT COUNT(*) FROM data")
        return rows.fetchall()[0][0]

    def getImageLabel(self, image):
        imageLabel = QtWidgets.QLabel(self.tableWidget)
        imageLabel.setScaledContents(True)
        pixmap = QtGui.QPixmap()
        pixmap.loadFromData(image, '.jpg')
        imageLabel.setPixmap(pixmap)
        return imageLabel

    def searchBtnFunc(self):
        text = self.searchBar.text()
        items = self.tableWidget.findItems(text, Qt.MatchExactly)
        if items:
            item = items[0]
            item.setBackground(QBrush(QColor(0, 255, 0)))
            item.setForeground(QBrush(QColor(255, 0, 0)))
            row = item.row()
            self.tableWidget.verticalScrollBar().setSliderPosition(row)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
